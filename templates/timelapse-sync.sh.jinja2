#!/bin/bash

# setting variables
BASE_DIR="/tmp/timelapse/"
LOGFILE="/tmp/timelapse-sync.log"
DATE=$(date +"%Y-%m-%d")
TIME=$(date +"%H%M%S")
LOCKFILE="/tmp/timelapse-sync.lock"
echo "run date: $DATE $TIME" > $LOGFILE

# ensuring all required directories exist
TARGET_DIR="$BASE_DIR/$DATE"
mkdir -p $TARGET_DIR

if ( set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null;
then
    # ensure the lockfile gets removed on exit
    trap 'rm -f "$LOCKFILE"; exit $?' INT TERM EXIT

    # copy and if successfull remove the file
    RSYNC_PASSWORD="{{ timelapse_rsync_password }}" rsync --bwlimit={{ timelapse_rsync_speed_limit }} --remove-source-files --size-only --exclude="*.jpg~" --ignore-missing-args --verbose --recursive --human-readable --log-file=$LOGFILE $BASE_DIR {{ timelapse_rsync_user }}@{{ timelapse_rsync_server }}::{{ timelapse_rsync_path }}/$HOSTNAME/

    # remove empty dirs
    find $BASE_DIR -type d -mtime +1 -empty -delete

    # remote the lockfile
    rm -f "$LOCKFILE"

    # remove our trap
    trap - INT TERM EXIT
fi


if [ -f "/tmp/timelapse.needs_reboot" ];
then
    # it seems we need to reboot
    /sbin/reboot
fi
