---
- name: Use libcamera for Raspberry OS < 12
  ansible.builtin.set_fact:
    rpicam_still_binary: libcamera-still
    rpicam_apps_package: libcamera-apps-lite
  when: ansible_distribution_version < '12'

- name: Use rpicam for Raspberry OS >= 12
  ansible.builtin.set_fact:
    rpicam_still_binary: rpicam-still
    rpicam_apps_package: rpicam-apps-lite
  when: ansible_distribution_version >= '12'

- name: Install required package
  ansible.builtin.package:
    name:
      - rsync
      - "{{ rpicam_apps_package }}"
    state: present
  become: true
  become_user: root

- name: Disable motion service
  ansible.builtin.systemd:
    name: motion
    masked: true
  become: true
  become_user: root

- name: Ensure path for scripts (/opt/timelapse)
  ansible.builtin.file:
    path: /opt/timelapse
    state: directory
    owner: root
    group: root
    mode: "0750"
  become: true
  become_user: root

- name: Deploy timelapse script
  ansible.builtin.template:
    src: timelapse.py.jinja2
    dest: /opt/timelapse/timelapse.py
    owner: root
    group: root
    mode: "0750"
  become: true
  become_user: root

- name: Deploy timelapse systemd service unit
  ansible.builtin.copy:
    src: timelapse.service
    dest: /etc/systemd/system/timelapse.service
    owner: root
    group: root
    mode: "0644"
  notify: Kill timelapse.py
  become: true
  become_user: root

- name: Enable the timelapse systemd service unit
  ansible.builtin.systemd_service:
    name: timelapse.service
    state: started
    enabled: true
    daemon_reload: true
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

- name: Deploy timelapse-sync script
  ansible.builtin.template:
    src: timelapse-sync.sh.jinja2
    dest: /opt/timelapse/timelapse-sync.sh
    owner: root
    group: root
    mode: "0750"
  become: true
  become_user: root

- name: Ensure the sync is called on system shutdown
  ansible.builtin.file:
    src: /opt/timelapse/timelapse-sync.sh
    dest: /usr/lib/systemd/system-shutdown/timelapse-sync.sh
    owner: root
    group: root
    state: link

- name: Deploy timelapse-sync systemd service unit
  ansible.builtin.copy:
    src: timelapse-sync.service
    dest: /etc/systemd/system/timelapse-sync.service
    owner: root
    group: root
    mode: "0644"
  become: true
  become_user: root

- name: Deploy timelapse-sync systemd timer unit
  ansible.builtin.template:
    src: timelapse-sync.timer.jinja2
    dest: /etc/systemd/system/timelapse-sync.timer
    owner: root
    group: root
    mode: "0644"
  become: true
  become_user: root

- name: Enable the timelapse-sync systemd timer unit
  ansible.builtin.systemd_service:
    name: timelapse-sync.timer
    state: started
    enabled: true
    daemon_reload: true
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

- name: Install lighttpd server and imagemagick
  ansible.builtin.package:
    name:
      - lighttpd
      - imagemagick
    state: present
  become: true
  become_user: root

- name: Ensure lighttpd is enabled
  ansible.builtin.systemd:
    name: lighttpd.service
    state: started
    enabled: true
  become: true
  become_user: root

- name: Deploy index.html file
  ansible.builtin.copy:
    src: index.html
    dest: /var/www/html/index.html
    owner: www-data
    group: www-data
    mode: "0644"
  become: true
  become_user: root

# ensure mounted boot
- name: Override config.txt location for Raspberry Pi OS version before bookworm
  ansible.builtin.set_fact:
    timelapse_config_dir: /boot
  when: ansible_distribution_major_version | int < 12

- name: Mount boot
  ansible.posix.mount:
    path: "{{ timelapse_config_dir }}"
    state: mounted
    src: /dev/mmcblk0p1
    fstype: vfat
  changed_when: false
  become: true
  become_user: root

- name: "Set config.txt for greyworld awb to {{ timelapse_greyworld_awb }}"
  ansible.builtin.lineinfile:
    path: "{{ timelapse_config_dir }}/config.txt"
    regexp: "^awb_auto_is_greyworld"
    line: "awb_auto_is_greyworld={{ timelapse_greyworld_awb }}"
  notify: Reboot required
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

- name: Enable camera overlay
  ansible.builtin.lineinfile:
    path: "{{ timelapse_config_dir }}/config.txt"
    regexp: "^dtoverlay=imx219"
    line: "dtoverlay=imx219"
  notify: Reboot required
  ignore_errors: "{{ ansible_check_mode }}"
  become: true
  become_user: root

- name: "Ensure the tl upload server can be looked up"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "timelapse_upload_server ipv4"
    line: "{{ timelapse_upload_server_ip }}      {{ timelapse_upload_server }} #timelapse_upload_server ipv4"
  become: true
  become_user: root

- name: "Ensure the tl upload server can be looked up via ipv6"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "timelapse_upload_server ipv6"
    line: "{{ timelapse_upload_server_ip6 }}      {{ timelapse_upload_server }} #timelapse_upload_server ipv6"
  become: true
  become_user: root
